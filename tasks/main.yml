---
# File: tasks/main.yml
# Description: Main tasks for pihole-dns-records role
# Author: Lucas Janin
# Date: 2025-03-19

# Create role data directory if it doesn't exist
- name: Ensure role data directory exists
  ansible.builtin.file:
    path: "{{ pihole_local_storage_dir }}"
    state: directory
    mode: "0755"
  delegate_to: localhost
  connection: local
  become: false

# Pre-processing: Check for previous hosts configuration
- name: Check if previous hosts save file exists
  ansible.builtin.stat:
    path: "{{ pihole_hosts_save_file }}"
  register: hosts_save_file
  delegate_to: localhost
  connection: local
  become: false

- name: Read previous hosts from save file if it exists
  ansible.builtin.slurp:
    src: "{{ pihole_hosts_save_file }}"
  register: previous_hosts_content
  when: hosts_save_file.stat.exists
  delegate_to: localhost
  connection: local
  become: false

- name: Parse previous hosts
  ansible.builtin.set_fact:
    previous_hostnames: "{{ previous_hosts_content.content | b64decode | from_json }}"
  when: hosts_save_file.stat.exists
  delegate_to: localhost
  connection: local
  become: false

# Create list of IP addresses from hostvars
- name: Create list of IP addresses
  ansible.builtin.set_fact:
    host_ips: "{{ host_ips | default([]) + [hostvars[item].ansible_host | default('')] }}"
  loop: "{{ ansible_play_hosts_all }}"
  delegate_to: localhost
  connection: local
  become: false
  run_once: true

# Validate input parameters
- name: Validate input parameters
  ansible.builtin.assert:
    that:
      - ansible_play_hosts_all | length == host_ips | length
      - not (host_ips | select('equalto', '') | list | length > 0)
    fail_msg: "All hosts must have ansible_host defined"
  delegate_to: localhost
  connection: local
  become: false
  run_once: true

# Main processing: Fetch Pi-hole config
- name: Fetch pihole.toml from remote Pi-hole server
  ansible.builtin.fetch:
    src: "{{ pihole_toml_file }}"
    dest: "{{ pihole_config_file }}"
    flat: true
  delegate_to: "{{ pihole_host }}"
  become: true

# Get original file stats
- name: Get original file stats
  ansible.builtin.stat:
    path: "{{ pihole_toml_file }}"
  register: original_file_stats
  delegate_to: "{{ pihole_host }}"
  become: true

# Remove previous hosts before adding new ones
- name: Remove previous hosts before adding new ones
  ansible.builtin.command: >
    python3 {{ role_path }}/files/manage_pihole_dns_records.py
    --action remove
    --hostnames '{{ previous_hostnames | to_json }}'
    --config "{{ pihole_config_file }}"
  register: cleanup_result
  changed_when: false    # Explicitly do not mark as changed if no removal is required
  when:
    - hosts_save_file.stat.exists
    - previous_hostnames is defined
    - previous_hostnames | length > 0
  delegate_to: localhost
  connection: local
  become: false

# Add new DNS records
- name: Add new DNS records
  ansible.builtin.command: >
    python3 {{ role_path }}/files/manage_pihole_dns_records.py
    --action add
    --hostnames '{{ ansible_play_hosts_all | to_json }}'
    --ips '{{ host_ips | to_json }}'
    --config "{{ pihole_config_file }}"
  register: script_result
  changed_when: "'Added' in script_result.stdout"
  failed_when: "script_result.rc != 0"
  delegate_to: localhost
  connection: local
  become: false

# Copy modified config back to Pi-hole server with preserved permissions
- name: Copy modified pihole.toml back to server
  ansible.builtin.copy:
    src: "{{ pihole_config_file }}"
    dest: "{{ pihole_toml_file }}"
    owner: "{{ original_file_stats.stat.pw_name | default(omit) }}"
    group: "{{ original_file_stats.stat.gr_name | default(omit) }}"
    mode: "{{ original_file_stats.stat.mode | default(omit) }}"
  delegate_to: "{{ pihole_host }}"
  become: true
  when: >
    (script_result is defined and script_result.stdout is defined and 'Added' in script_result.stdout)
    or
    (cleanup_result is defined and cleanup_result.stdout is defined and 'Removed' in cleanup_result.stdout)
  notify:
    - "{{ pihole_docker_mode | ternary('restart pihole docker container', 'restart pihole-FTL') }}"

- name: Copy modified pihole.toml back to server
  ansible.builtin.copy:
    src: "{{ pihole_config_file }}"
    dest: "{{ pihole_toml_file }}"
    owner: "{{ original_file_stats.stat.pw_name | default(omit) }}"
    group: "{{ original_file_stats.stat.gr_name | default(omit) }}"
    mode: "{{ original_file_stats.stat.mode | default(omit) }}"
  delegate_to: "{{ pihole_host }}"
  become: true
  when: >
    (script_result is defined and script_result.stdout is defined and 'Added' in script_result.stdout)
    or
    (cleanup_result is defined and cleanup_result.stdout is defined and 'Removed' in cleanup_result.stdout)
  notify: "{{ 'restart pihole docker container' if pihole_docker_mode else 'restart pihole-FTL' }}"
